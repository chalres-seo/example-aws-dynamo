package com.aws.dynamodb.items

import com.amazonaws.services.dynamodbv2.datamodeling._
import com.typesafe.scalalogging.LazyLogging
import org.joda.time.DateTime

@DynamoDBTable(tableName="exampleB")
class ExampleItemB extends LazyLogging with IDynamoDBItem {
  private var idB: String = _
  private var indexB: Integer = _
  private var valueB: String = _
  private var updateTime: String = DateTime.now().toString("yyyy-MM-dd HH:mm:ss")

  def this(_id: String, _index: Integer, _value: String) {
    this()
    this.idB = _id
    this.indexB = _index
    this.valueB = _value
  }

  @DynamoDBHashKey
  @DynamoDBAutoGeneratedKey
  def getIdB(): String = this.idB
  def setIdB(id: String): Unit = this.idB = id

  @DynamoDBRangeKey
  def getIndexB(): Integer = this.indexB
  def setIndexB(index: Integer): Unit = this.indexB = index

  def getValueB(): String = this.valueB
  def setValueB(valueB: String): Unit = this.valueB = valueB

  @DynamoDBIgnore
  override def getHashKey: Option[AnyRef] = Option.apply(this.idB.asInstanceOf[AnyRef])

  @DynamoDBIgnore
  override def setHashKey(o: Any): Unit = this.idB = o.asInstanceOf[String]

  @DynamoDBIgnore
  override def getRangeKey: Option[AnyRef] = Option.apply(this.indexB.asInstanceOf[AnyRef])

  @DynamoDBIgnore
  override def setRangeKey(o: Any): Unit = this.indexB = o.asInstanceOf[Integer]

  override def getUpdateTime: String = this.updateTime
  override def setUpdateTime(updateTime: String): Unit = this.updateTime = updateTime

  @DynamoDBIgnore
  def updateUpdateTime() = this.updateTime = DateTime.now().toString("yyyy-MM-dd HH:mm:ss")


  override def toString = s"ExampleItemB($idB, $indexB, $valueB, $updateTime)"


  def canEqual(other: Any): Boolean = other.isInstanceOf[ExampleItemB]

  override def equals(other: Any): Boolean = other match {
    case that: ExampleItemB =>
      (that canEqual this) &&
        idB == that.idB &&
        indexB == that.indexB &&
        valueB == that.valueB &&
        updateTime == that.updateTime
    case _ => false
  }

  override def hashCode(): Int = {
    val state = Seq(idB, indexB, valueB, updateTime)
    state.map(_.hashCode()).foldLeft(0)((a, b) => 31 * a + b)
  }
}