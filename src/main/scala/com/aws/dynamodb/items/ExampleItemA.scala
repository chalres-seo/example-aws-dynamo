package com.aws.dynamodb.items

import com.amazonaws.services.dynamodbv2.datamodeling._
import com.typesafe.scalalogging.LazyLogging
import org.joda.time.DateTime

@DynamoDBTable(tableName="exampleA")
class ExampleItemA extends LazyLogging with IDynamoDBItem {
  private var idA: String = _
  private var indexA: Integer = _
  private var valueA: String = _
  private var updateTime: String = DateTime.now().toString("yyyy-MM-dd HH:mm:ss")

  def this(_id: String, _index: Integer, _value: String) {
    this()
    this.idA = _id
    this.indexA = _index
    this.valueA = _value
  }

  @DynamoDBHashKey
  @DynamoDBAutoGeneratedKey
  def getIdA(): String = this.idA
  def setIdA(id: String): Unit = this.idA = id

  @DynamoDBRangeKey
  def getIndexA(): Integer = this.indexA
  def setIndexA(index: Integer): Unit = this.indexA = index

  def getValueA(): String = this.valueA
  def setValueA(valueA: String): Unit = this.valueA = valueA

  @DynamoDBIgnore
  override def getHashKey: Option[AnyRef] = Option.apply(this.idA.asInstanceOf[AnyRef])

  @DynamoDBIgnore
  override def setHashKey(o: Any): Unit = this.idA = o.asInstanceOf[String]

  @DynamoDBIgnore
  override def getRangeKey: Option[AnyRef] = Option.apply(this.indexA.asInstanceOf[AnyRef])

  @DynamoDBIgnore
  override def setRangeKey(o: Any): Unit = this.indexA = o.asInstanceOf[Integer]

  override def getUpdateTime: String = this.updateTime
  override def setUpdateTime(updateTime: String): Unit = this.updateTime = updateTime

  @DynamoDBIgnore
  def updateUpdateTime() = this.updateTime = DateTime.now().toString("yyyy-MM-dd HH:mm:ss")

  override def toString = s"ExampleItemA($idA, $indexA, $valueA, $updateTime)"

  def canEqual(other: Any): Boolean = other.isInstanceOf[ExampleItemA]

  override def equals(other: Any): Boolean = other match {
    case that: ExampleItemA =>
      (that canEqual this) &&
        idA == that.idA &&
        indexA == that.indexA &&
        valueA == that.valueA &&
        updateTime == that.updateTime
    case _ => false
  }

  override def hashCode(): Int = {
    val state = Seq(idA, indexA, valueA, updateTime)
    state.map(_.hashCode()).foldLeft(0)((a, b) => 31 * a + b)
  }
}